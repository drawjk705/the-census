name: CI
on:
    push:
    pull_request:
        branches:
            - '**'

jobs:
  commit:
    runs-on: ubuntu-latest
    steps:
      - name: check out repo
        uses: actions/checkout@v2

      - name: make a change
        run: |
          echo hello there > test.txt

      - name: commit the changes
        uses: EndBug/add-and-commit@v6
        with:
          message: this is a test
          tag: 'test tag --force'


    # lint:
    #     runs-on: ubuntu-latest
    #     strategy:
    #         matrix:
    #             python-version: [3.8, 3.9]
    #         fail-fast: false

    #     steps:
    #         - name: check out repo
    #           uses: actions/checkout@v2

    #         - name: set up python
    #           uses: actions/setup-python@v2
    #           with:
    #               python-version: ${{ matrix.python-version }}

    #         - name: set up node
    #           uses: actions/setup-node@v2
    #           with:
    #               node-version: '12'

    #         - name: Install Poetry Action
    #           uses: snok/install-poetry@v1.1.1
    #           with:
    #               version: 1.1.4
    #               virtualenvs-create: true
    #               virtualenvs-in-project: true

    #         - name: load cached venv
    #           id: cached-poetry-dependencies
    #           uses: actions/cache@v2
    #           with:
    #               path: .venv
    #               key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    #         - name: install poetry dependencies
    #           run: poetry install
    #           if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

    #         - name: load cached npm
    #           id: cached-npm-dependencies
    #           uses: actions/cache@v2
    #           with:
    #               path: ~/.npm
    #               key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

    #         - name: install pyright dependencies
    #           run: sudo npm install -g pyright

    #         - name: lint
    #           run: |
    #               source ./.venv/bin/activate
    #               poe typing
    #               poe lint
    #               poe sort-imports

    # test:
    #     runs-on: ubuntu-latest
    #     strategy:
    #         matrix:
    #             python-version: [3.8, 3.9]
    #         fail-fast: false

    #     steps:
    #         - name: check out repo
    #           uses: actions/checkout@v2

    #         - name: set up python
    #           uses: actions/setup-python@v2
    #           with:
    #               python-version: ${{ matrix.python-version }}

    #         - name: Install Poetry Action
    #           uses: snok/install-poetry@v1.1.1
    #           with:
    #               version: 1.1.4
    #               virtualenvs-create: true
    #               virtualenvs-in-project: true

    #         - name: load cached venv
    #           id: cached-poetry-dependencies
    #           uses: actions/cache@v2
    #           with:
    #               path: .venv
    #               key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    #         - name: install poetry dependencies
    #           run: poetry install
    #           if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

    #         - name: test
    #           run: |
    #               source ./.venv/bin/activate
    #               poe test-coverage -vv
    #               coverage report

    # publish:
    #     # needs: [lint, test]
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Check out repo
    #           uses: actions/checkout@v2

    #         - name: Set up python
    #           uses: actions/setup-python@v2
    #           with:
    #               python-version: 3.9

    #         - name: Install poetry
    #           uses: snok/install-poetry@v1.1.1
    #           with:
    #               version: 1.1.4
    #               virtualenvs-create: true
    #               virtualenvs-in-project: true

    #         - name: Load cached venv
    #           id: cached-poetry-dependencies
    #           uses: actions/cache@v2
    #           with:
    #               path: .venv
    #               key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    #         - name: Install poetry dependencies
    #           run: poetry install
    #           if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

    #         # - name: Maybe bump major
    #         #   if: startsWith(github.event.head_commit.message, 'breaking:')
    #         #   run: |
    #         #       poetry version major

    #         # - name: Maybe bump patch
    #         #   if: ${{ startsWith(github.event.head_commit.message, 'fix:') || startsWith(github.event.head_commit.message, 'patch:' )}}
    #         #   run: |
    #         #       poetry version patch

    #         - name: Maybe bump patch
    #           # if: ${{ !(startsWith(github.event.head_commit.message, 'fix:') || startsWith(github.event.head_commit.message, 'patch:' ) && !(startsWith(github.event.head_commit.message, 'breaking:')))}}
    #           run: |
    #               poetry version patch
    #               cat pyproject.toml

    #         - name: Get version number
    #           run: |
    #               VERSION=$(poetry version)
    #               VERSION=${VERSION#"us-data "}
    #               echo "version=$VERSION" >> $GITHUB_ENV

    #         - name: cat again
    #           run: |
    #             echo $REF
    #             cat pyproject.toml
    #           env:
    #             REF: ${{ github.ref }}

    #         # # - name: Build and publish
    #         # #   run: |
    #         # #       poetry build
    #         # #       poetry config pypi-token.testpypi $PYPI_TEST_TOKEN
    #         # #       poetry publish -r testpypi
    #         # #   env:
    #         # #       PYPI_TEST_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}

    #         # - name: Create release
    #         #   id: create_release
    #         #   uses: actions/create-release@latest
    #         #   env:
    #         #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #         #   with:
    #         #       tag_name: v${{ env.version }}
    #         #       release_name: v${{ env.version }}
    #         #       draft: false
    #         #       prerelease: false

    #         # - name: echo test
    #         #   run: echo $REF
    #         #   env:
    #         #     REF: ${{ github.ref }}              
