name: CI

on:
    push:
        branches-ignore:
            - main
    pull_request:
        branches-ignore:
            - main

jobs:
    lint:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: [3.8, 3.9]
            fail-fast: false

        steps:
            - name: checkout repo
              uses: actions/checkout@v2

            - name: set up python
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python-version }}

            - name: set up node
              uses: actions/setup-node@v2
              with:
                  node-version: '12'

            - name: install poetry
              uses: snok/install-poetry@v1.1.1
              with:
                  version: 1.1.4
                  virtualenvs-create: true
                  virtualenvs-in-project: true

            - name: load cached venv
              id: cached-poetry-dependencies
              uses: actions/cache@v2
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

            - name: install poetry dependencies
              run: poetry install
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

            - name: load cached npm
              id: cached-npm-dependencies
              uses: actions/cache@v2
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

            - name: install pyright dependencies
              run: sudo npm install -g pyright

            - name: lint
              run: |
                  source ./.venv/bin/activate
                  poe typing
                  poe lint
                  poe sort-imports -c

    test:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: [3.8, 3.9]
            fail-fast: false

        steps:
            - name: checkout repo
              uses: actions/checkout@v2

            - name: set up python
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python-version }}

            - name: install poetry action
              uses: snok/install-poetry@v1.1.1
              with:
                  version: 1.1.4
                  virtualenvs-create: true
                  virtualenvs-in-project: true

            - name: Load cached venv
              id: cached-poetry-dependencies
              uses: actions/cache@v2
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

            - name: install poetry dependencies
              run: poetry install
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

            - name: test it
              run: |
                  source ./.venv/bin/activate
                  poe test-coverage -vv
                  coverage report

    build:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: [3.8, 3.9]
            fail-fast: false

        steps:
            - name: checkout repo
              uses: actions/checkout@v2

            - name: set up python
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python-version }}

            - name: install poetry
              uses: snok/install-poetry@v1.1.1
              with:
                  version: 1.1.4
                  virtualenvs-create: true
                  virtualenvs-in-project: true

            - name: load cached venv
              id: cached-poetry-dependencies
              uses: actions/cache@v2
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

            - name: install poetry dependencies
              run: poetry install
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

            - name: try build
              run: poetry build
