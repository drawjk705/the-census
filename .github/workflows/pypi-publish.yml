name: publish

on:
    push:
        branches:
            - main

jobs:
    publish:
        runs-on: ubuntu-latest
        steps:
            - name: Check out repo
              uses: actions/checkout@v2

            - name: Set up python
              uses: actions/setup-python@v2
              with:
                  python-version: 3.9

            - name: Install poetry
              uses: snok/install-poetry@v1.1.1
              with:
                  version: 1.1.4
                  virtualenvs-create: true
                  virtualenvs-in-project: true

            - name: Load cached venv
              id: cached-poetry-dependencies
              uses: actions/cache@v2
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

            - name: Install poetry dependencies
              run: poetry install
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

            - name: Maybe bump major
              if: startsWith(github.event.head_commit.message, 'breaking:')
              run: |
                  poetry version major

            - name: Maybe bump patch
              if: ${{ startsWith(github.event.head_commit.message, 'fix:') || startsWith(github.event.head_commit.message, 'patch:' )}}
              run: |
                  poetry version patch

            - name: Maybe bump minor
              if: ${{ !(startsWith(github.event.head_commit.message, 'fix:') || startsWith(github.event.head_commit.message, 'patch:' ) && !(startsWith(github.event.head_commit.message, 'breaking:')))}}
              run: |
                  poetry version minor

            - name: Get version number
              run: |
                  VERSION=$(poetry version)
                  VERSION=${VERSION#"us-data "}
                  echo "version=$VERSION" >> $GITHUB_ENV

            # - name: Build and publish
            #   run: |
            #       poetry build
            #       poetry config pypi-token.testpypi $PYPI_TEST_TOKEN
            #       poetry publish -r testpypi
            #   env:
            #       PYPI_TEST_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}

            - name: Create release
              id: create_release
              uses: actions/create-release@latest
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: v${{ env.version }}
                  release_name: v${{ env.version }}
                  draft: false
                  prerelease: false
